Handlebars.js ships with some built-in helpers, such as `\{{#each}}`, `\{{#if}}` and `\{{#unless}}`. Here is how helpers work:

* A Handlebars helper call is a simple identifier, followed by zero or more parameters (separated by space).  
* Each parameter is a Handlebars expression. 
* Handlebars helpers can be accessed from any context in a template.

[Handlebars.js](https://github.com/wycats/handlebars.js) is currently the default template library for [assemble](http://github.com/assemble/assemble).

### Creating Helpers

> Contributions welcome! Please consider adding your own helpers to this library.

Handlebars is advantageous over other templating libraries when it comes to creating your own custom helpers. Just register your function into Handlebars with the `Handlebars.registerHelper` method, and that helper will be available to any template you compile afterwards. 

Handlebars allows two different kinds of helpers:

* **Expression helpers** are basically regular functions that take the name of the helper and the helper function as arguments. Once an expression helper is registered, it can be called anywhere in your templates, then Handlebars takes the expression's return value and writes it into the template.
* **Block helpers** There are a few block helpers included by default with Handlebars, `\{{#each}}`, `\{{#if}}` and `\{{#unless}}`. Custom block helpers are registered the same way as exptression helpers, but the difference is that Handlebars will pass the contents of the block compiled into a function to the helper.

It is important to remember that Handlebars helpers are processed before the markdown is processed. They either need to output markdown, or more likely html that will be embedded in the markdown. 

However, markdown within embedded html elements is not processed, and it is too late to surround the content in markdown blocks (`{{#markdown}}`) as Handlebars processing is already occurring.

For this reason, especially for block helpers, it is often necessary to continue parsing the content inside the block as markdown. This can be accomplished by calling a helper from within the custom helper:

```js
module.exports.register = function(Handlebars) {
  Handlebars.registerHelper('myhelper', function (options) {
    var parsedContent = Handlebars.helpers.markdown.apply(this, arguments)
    return new Handlebars.SafeString('<div class="myhelper">' + parsedContent + '</div>');
  });
};
```

Also, if you use Assemble be sure to visit the [assemble docs](https://github.com/assemble/assemble/wiki/Helpers) to learn about registering custom helpers.
