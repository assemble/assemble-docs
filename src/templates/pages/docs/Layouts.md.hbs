---
title: Layouts
section: templates
categories:
- templates
tags:
- layout
- layouts
---

> Layouts are used for "wrapping" the content of individual pages with common HTNL, such as a "header" and "footer". 


## Layout example

Layouts are optional, but the `\{{> body }}` tag is required for content to be pulled into a layout.

```html
<!DOCTYPE html>
<html>
  <head>
    <title>\{{title}}</title>
  </head>
  <body>
    <!-- the body "pulls in" content from pages -->
    \{{> body }}
  </body>
</html>
```

## Granular control

1. **Task options**: Great for defining a "project-wide" default. 
2. **Target options**: Override the "project default" in the `options` for each target. Offers greater control over which "types" of pages get which `layout`. 
3. **Page-by-page**: If you require more granularity you can define a layout in the [YFM][yaml-front-matter] of a page
{{#draft}}4. **`.json` or `.yml` files**: THIS HASN'T BEEN IMPLEMENTED{{/draft}}



### Multiple layouts

Since you can create as many [targets](http://gruntjs.com/configuring-tasks) as you require, defining layouts in the Gruntfile is a great way of quickly setting up your layout "defaults". In the `assemble` task in your Gruntfile.js, you can define a layout at the task-level, and/or a different layout for each build target:

```javascript
assemble: {
  options: {
    layout: 'layouts/default.hbs'
  },
  site: {
    files: {
      'site/': ['templates/pages/*.hbs']
    }
  },
  blog: {
    options: {
      layout: 'layout/post.hbs'
    },
    files: {
      'blog/': ['templates/posts/*.hbs']
    }
  },
  docs: {
    options: {
      layout: 'layouts/docs.hbs'
    },
    files: {
      'docs/': ['templates/docs/*.hbs']
    }
  }
}
```

## Page-specific Layouts

If you require a higher level of granularity than defining layouts in the Gruntfile, you may also define layouts on a page-by-page basis, thus overriding both the task-level ("global") defaults and the target-level defaults.

To do so, just add the layout to the [YFM][yaml-front-matter] of the page like this:

```yaml
---
layout: path/to/layout.hbs
---
```
 
## Disabling Layouts

* **Pages**: add `layout: false` to the YAML front matter of any page that should build without a layout. 
* **Targets**: add `layout: false` to the options of any target that should build pages without a layout. 


## Example usage
Your imagination is the only limit to what can be done with layouts, so these are just examples.


### Advanced layout

```html
<!DOCTYPE html>
<html>
  <head>
    <title>\{{title}}</title>
  </head>
  <body>

    <!-- HEADER -->
    <header class="masthead subhead">
      <div class="container">
        <div class="row">
          <div class="col col-lg-12">
            <h1><span class="text-muted">Docs /&nbsp;</span> \{{#if section}}\{{ section }} \{{else}}\{{basename}}\{{/if}}</h1>
          </div>
        </div>
      </div>
    </header>

    <!-- CONTENT -->
    <div class="container">
      \{{> body }}
    </div>

    <!-- FOOTER -->
    \{{> footer }}
  </body>
</html>
```

### Layouts for other formats

#### Markdown layouts

Layouts don't have to be HTML, they can be whatever language you want them to be. If you're generating markdown pages instead of HTML, maybe for a project wiki or other markdown documentation, then you'll want to use a markdown formatted `layout`. 

In this example, instead of adding adding the traditional head and footer we'll add some link references to make sure the same ones are used on every generated page. This makes it easier to maintain links and it also cuts down on potential for broken links:

```markdown
\{{> body }}

* * *

_This page was generated using Grunt and [assemble][repo] on \{{ today }}._

[org]: https://github.com/assemble
[repo]: https://github.com/assemble/assemble
[issues]: https://github.com/assemble/assemble/issues
[wiki]: https://github.com/assemble/assemble/wiki
```

#### README Layout

```markdown
# \{{pkg.name}} \{{travis-badge}}

> \{{pkg.description}}

\{{> body }}

* * *

_This readme was generated using Grunt and [assemble][repo] on \{{ today }}._

[org]: https://github.com/assemble
[repo]: https://github.com/assemble/assemble
[issues]: https://github.com/assemble/assemble/issues
[wiki]: https://github.com/assemble/assemble/wiki
```


## Layout FAQ
* Layouts are optional
* When a layout is specified, _it must include a `\{{> body }}` tag to render content_ from any file that uses the layout. 
* Layouts may be defined in the Gruntfile or in [YFM][yaml-front-matter] of a page. 
* A layout defined for a target will override a layout defined at the task level.
* A layout defined in [YFM][yaml-front-matter] will override a layout defined in the Gruntfile
* [Lo-dash templates][about-templates] can be used in YAML front-matter ayout. Path, file name and extension can be determined


## Related info
* [options.layout][options-layout]
* [Pages][pages]
* [Partials][partials]
* [about-templates][about-templates]
* [YFM][yaml-front-matter]


{{#draft}}
### Define layouts in JSON or YAML
Layouts can also be defined on a page-by-page basis using `.json` or `.yml` data files. 

Or you can optionally add the layout to external configuration files for each page, using 

```json
{
  "layout": ""
}
```
or a `[page-name].yml`

```yaml
---
page:
  layout
---
```

```json
{
  "layout": {
    "header" : "header-template",
    "sidebar": "sidebar-template",
    "body"   : "body-template",
    "footer" : "footer-template"
  }
}
```
## Default Layout
\{{! THESE ARE JUST CONCEPTS }}

`config.json` or something

```json
{
  "layout": ""
}
```
Example layout configuration:

```json
{
  "layouts"  : {
    "default" : {
      "name" : "default",
      "sections" : [
        "site.section"
      ]
    }
  }
}
```
\{{! THESE ARE JUST CONCEPTS }}

```json
{
  "name": "Stark",
  "author": "Jon Schlinkert",
  "layouts": {
    "default": {
      "name": "Subpage",
      "sections": [
        "header",
        "one-sidebar",
        "footer"
      ]
    },
    "fullwidth": {
      "name": "Full-width",
      "sections": [
        "header",
        "full-width",
        "footer"
      ]
    }
  },
  "navigations": [
    {
      "title": "Main Navigation",
      "name": "mainNav"
    },
    {
      "title": "Secondary Navigation",
      "name": "secondaryNav"
    }
  ],
  "stylesheets": [
    "global.less",
    "typography.less"
  ]
}
```

\{{! THESE ARE JUST CONCEPTS }}

### Layout Variations

Consider the common case where the homepage has a different layout than the sub pages. Let's say that the homepage is full-width and the "sub-pages" have a sidebar, the header and footer sections are the same, but the middle content section is different.

**Step 1: Create Multiple section Files**

First, create the shared layouts in any folder, such as `src/templates/sections/` :

* header.hbs
* footer.hbs

Then create the two different sections for the middle content section:

* full-width.hbs
* sidebar.hbs


**Step 2: Configure Layouts**

Set up the multiple layouts in a configuration file (such as `pages.json`):

```json
// ignore this!!! I'm experimenting with ideas so it's inconsistent...
[
  {
    "home" : {
      "name" : "Sidebar",
      "template": "index.hbs",
      "layout" : "default.hbs",
      "sections" : [ "header", "sidebar", "footer" ]
    },
    "homepage" : {
      "name" : "Full Width",
      "sections" : [ "header", "full-width", "footer" ]
    }
  },
  {
    "layouts" : {
      "default" : {
        "name" : "Sidebar",
        "sections" : [ "header", "sidebar", "footer" ]
      },
      "homepage" : {
        "name" : "Full Width",
        "sections" : [ "header", "full-width", "footer" ]
      }
    }
  }
]
```json

```json
{
  "config": {
    "defaults": {
      "layouts" : {
        "site": "",
        "area": "",
        "collections": "",
        "default" : {
          "name" : "Sidebar",
          "sections" : [ "header", "sidebar", "footer" ]
        },
        "homepage" : {
          "name" : "Full Width",
          "sections" : [ "header", "full-width", "footer" ]
        },
        "homepage" : {
          "name" : "Full Width",
          "sections" : [ "header", "full-width", "footer" ]
        }
      }
    }
  }
}
```
You can also specify the default homepage layout. If you add a layout variable named "homepage". See example above. The homepage default layout overrides all other default layouts.

## Additional layout types

* Page layouts
* Section layouts
* Partial layouts


{{/draft}}